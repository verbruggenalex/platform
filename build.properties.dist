# Subsite configuration
# ---------------------

# The site name.
subsite.name = My Project
subsite.id = myproject
subsite.install.modules = myproject_core
subsite.url.production =
subsite.url.playground =
subsite.url.acceptance =


# Subsite clone configuration.
#-----------------------------

# Project database url scheme.
subsite.database.url.scheme = https

# Project database url username is used for .htaccess to file download url. Use only
# within build.properties.local if needed. Never commit credentials on github.
subsite.database.url.htaccess.username =

# Project database url username is used for .htaccess to file download url. Use only
# within build.properties.local if needed. Never commit credentials on github.
subsite.database.url.htaccess.password =

# Project database url. Define the scheme in subsite.database.url.scheme property. If
# you want developers to use the same database this should be added to the projects
# build.properties file.
subsite.database.url = webgate.ec.europa.eu/fpfis/files-for/${subsite.id}/

# Project database filename.  If you want developers to use the same database this
# should be added to the projects build.properties file. The file has to be
# compressed in .gz format. Thus ending in .sql.gz.
subsite.database.filename =

# The information of the project reference repository.
subsite.reference.repository = https://github.com/ec-europa/myproject-reference
subsite.reference.branch = master
subsite.reference.remote = reference

# Starterkit locations
# ---------------------------------------

ssk.root = ${phing.dir.starterkit}
ssk.includes = ${ssk.root}/includes
ssk.build = ${ssk.includes}/phing/build
ssk.templates = ${ssk.includes}/templates
ssk.composer = ${ssk.includes}/composer
ssk.vendor = ${ssk.root}/vendor
ssk.bin = ${ssk.root}/bin


# Development configuration
# ---------------------------------------

# Development / testing modules to download.
development.modules.download = devel maillog stage_file_proxy

# Development / testing modules to enable.
development.modules.enable = devel context field_ui maillog simpletest stage_file_proxy views_ui

# The location where development modules will be installed.
development.modules.location = devel

# Variables to set for cloning production.
development.variables.error_level = 2
development.variables.views_ui_show_sql_query = 1
development.variables.views_ui_show_performance_statistics = 1
development.variables.views_show_additional_queries = 1
development.variables.stage_file_proxy_origin = https://ec.europa.eu/${subsite.id}
development.variables.stage_file_proxy_origin_dir = sites/${subsite.id}/files
development.variables.stage_file_proxy_hotlink = 1


# Drupal configuration
# --------------------

# Database settings.
drupal.db.type = mysql
drupal.db.name = db_name
drupal.db.user = root
drupal.db.password =
drupal.db.host = 127.0.0.1
# TODO: replace host with docker service name?
drupal.db.port = 3306
drupal.db.url = ${drupal.db.type}://${drupal.db.user}:${drupal.db.password}@${drupal.db.host}:${drupal.db.port}/${drupal.db.name}

# Solr env url. Either d7_apachesolr or d7_search_api.
## QUERY: can be queried and correct module enable in install.
drupal.solr.activate = 1
drupal.solr.env.url = http://solr:8983/solr/d7_apachesolr

# Admin user
drupal.admin.username = admin
drupal.admin.password = pass
drupal.admin.email = ${drupal.admin.username}@example.com

# The location of the .htaccess file in the Drupal root folder.
drupal.htaccess.path = ${project.build.dir}/.htaccess

# Configuration to append to the .htaccess file in the Drupal root folder.
drupal.htaccess.append.text =

# The site name to use. Use 'all' unless you want to build a multisite setup.
drupal.site.name = all

# The Drupal core version.
drupal.core.version = 7.x


# Platform configuration
# ----------------------

# The root directory of the platform. This will become the Drupal root folder,
# so point your web server here.
project.build.dir = ${project.basedir}/platform

# The install profile to use. Either multisite_drupal_standard or
# multisite_drupal_communities.
platform.profile.name = multisite_drupal_standard

# The branch, tag or commit to use, eg. 'master', 'develop', '2.1.56',
# '7df0d254b'. It is possible to use MySQL style wildcards here, so you can use
# '2.%' to get the latest tagged 2.x.x release which was built.
# For most projects you would want to follow 'master' so that you always have
# the latest version that is deployed on production. Use 'develop' to check if
# your project is compatible with the upcoming release.
platform.package.reference = 2.4

# The provider that hosts the platform repository.
platform.package.provider = git-hub

# The name of the platform repository.
platform.package.repository = ec-europa/platform-dev

# Activate vanilla database caching to skip drush site-install.
platform.package.database = 0

# The path to the downloaded package. This is named 'deploy-package-${platform.package.reference}.tar.gz'.
platform.package.tarball = deploy-package-${platform.package.reference}.tar.gz

# The ContinuousPHP token. Leave this empty for open source projects. Note that
# the NextEuropa platform is open source.
## OPENSOURCE REPLICATE: For starterkit and platform.
platform.package.token =


# Paths
# -----

# Paths to executables.
## TODO: Document fallback system.
composer.bin = composer.phar
## GOOD
drush.bin = ${ssk.bin}/drush
git.bin = git
phing.bin = ${ssk.bin}/phing

# Build location.
phing.subsite.build.dir = build
phing.subsite.src.dir = ${ssk.root}/src
dist.build.dir = ${project.basedir}/${phing.subsite.build.dir}

# Temporary folder.
# GOOD BUT could be renamed.
phing.subsite.tmp.dir = ${project.basedir}/tmp

# Project makefile.
project.make = ${project.resources.dir}/site.make

# Local resources.
project.resources.dir = ${project.basedir}/resources
project.resources.lib.dir = ${project.basedir}/lib
project.resources.features.dir = ${project.resources.lib.dir}/features
project.resources.modules.dir = ${project.resources.lib.dir}/modules
project.resources.profiles.dir = ${project.resources.lib.dir}/profiles
project.resources.source.dir = ${project.resources.lib.dir}/src
project.resources.themes.dir = ${project.resources.lib.dir}/themes
project.resources.favicon.ico = ${project.resources.dir}/favicon.ico
project.resources.composer.json = ${project.resources.dir}/composer.json
project.resources.composer.lock = ${project.resources.dir}/composer.lock

# Temporary resources. These are generated on the fly when building.
subsite.temporary.development.make = ${phing.project.tmp.dir}/development.make

# Files and directories inside the Drupal installation for local development.
project.build.settings.dir = ${project.build.sites.dir}/default
project.build.files.dir = ${project.build.settings.dir}/files
project.build.tmp.dir = ${project.build.settings.dir}/tmp

project.build.profiles.dir = ${project.build.dir}/profiles
project.build.profile.dir = ${project.build.profiles.dir}/${platform.profile.name}

project.build.sites.dir = ${project.build.dir}/sites
project.build.subsite.dir = ${project.build.sites.dir}/${drupal.site.name}
project.build.subsite.libraries.dir = ${project.build.subsite.dir}/libraries
project.build.project.modules.dir = ${project.build.subsite.dir}/modules
project.build.project.modules.contrib.dir = ${project.build.project.modules.dir}/contrib
project.build.project.modules.custom.dir = ${project.build.project.modules.dir}/custom
project.build.project.modules.features.dir = ${project.build.project.modules.dir}/features
project.build.subsite.source.dir = ${project.build.subsite.dir}/src
project.build.subsite.themes.dir = ${project.build.subsite.dir}/themes
project.build.subsite.composer.json = ${project.build.subsite.dir}/composer.json
project.build.subsite.composer.lock = ${project.build.subsite.dir}/composer.lock

# Files and directories inside the distribution build.
dist.build.modules.dir = ${dist.build.dir}/modules
dist.build.modules.custom.dir = ${dist.build.modules.dir}/custom
dist.build.modules.features.dir = ${dist.build.modules.dir}/features
dist.build.source.dir = ${dist.build.dir}/src
dist.build.themes.dir = ${dist.build.dir}/themes
dist.build.composer.json = ${dist.build.dir}/composer.json
dist.build.composer.lock = ${dist.build.dir}/composer.lock


# Rebuild configuration
# ---------------------

# Automatically rebuild without asking confirmation.
project.rebuild.auto = 0

# Rebuild backup destination.
project.rebuild.backup.destination = ${phing.subsite.tmp.dir}/backup-site

# Semicolon separated list of folders to backup.
project.rebuild.backup.folders = ${project.build.files.dir};${project.build.tmp.dir}

# Semicolon separated list of files to backup.
project.rebuild.backup.files = ${project.build.settings.dir}/settings.php


# Behat configuration
# -------------------
## TO REVIEW WITH PLATFORM

# The location of the Behat executable.
behat.bin = ${project.build.subsite.dir}/vendor/bin/behat

# The location of the Behat tests.
behat.dir = ${project.basedir}/tests

# The location of the Behat configuration template.
behat.yml.template = ${behat.dir}/behat.yml.dist

# The location of the generated Behat configuration file.
behat.yml.path = ${behat.dir}/behat.yml

# The base URL to use in Behat tests.
## TODO: Make this docker compatible by using selenium:port.
behat.base_url = http://localhost:8080

# The location to search for Behat subcontexts.
behat.subcontexts.path = ${project.build.subsite.dir}

# The output format to use for Behat tests, either 'progress' or 'pretty'.
behat.formatter.name = progress

# Enable strict mode in Behat tests. Will only pass if all tests are explicitly
# passing.
behat.options.strict = false

# Set verbosity for Behat tests. 0 is completely silent, 1 is normal output, 2
# shows exception backtraces, 3 shows debugging information.
behat.options.verbosity = 2

# Stream output to show progress.
behat.options.passthru = true

# The path to the custom Behat Contexts.
behat.src.dir = ${behat.dir}/src


# PHP CodeSniffer configuration
# -----------------------------
## ALLGOOD

# The file extensions to test.
# Delimited by space, comma or semicolon.
phpcs.extensions = php inc module install info test profile theme css js

# The default configuration file to generate.
phpcs.config = ${project.basedir}/phpcs.xml

# The locations for installed standards, delimited by comma.
phpcs.installed.paths = ${ssk.vendor}/ec-europa/qa-automation/phpcs/SubStandards

# The coding standards to enforce.
# Delimited by space, comma or semicolon..
phpcs.standards = Subsite;${project.basedir}/phpcs-ruleset.xml

# Paths to check, delimited by semicolons.
phpcs.files = ${project.resources.dir};${project.resources.lib.dir};${phing.subsite.src.dir};${behat.src.dir}

# Paths to ignore, delimited by semicolons.
phpcs.ignore =

# Returns a 0 error code when only warnings are found if enabled. Ment for CI.
phpcs.passwarnings = 0

# The report format. For example 'full', 'summary', 'diff', 'xml', 'json'.
# Delimited by space, comma or semicolon.
phpcs.reports = summary

# Whether or not to show sniff codes in the report.
phpcs.sniffcodes = 0

# Whether or not to show the progress of the run.
phpcs.progress = 1

# The location of the file containing the global configuration options.
phpcs.global.config = ${ssk.vendor}/squizlabs/php_codesniffer/CodeSniffer.conf

# Whether or not to run a coding standards check before doing a git push. Note
# that this will abort the push if the coding standards check fails.
phpcs.prepush.enable = 1

# The source and destination paths of the git pre-push hook.
phpcs.prepush.source = ${ssk.vendor}/pfrenssen/phpcs-pre-push/pre-push
phpcs.prepush.destination = ${project.basedir}/resources/git/hooks/pre-push/phpcs


# Host configuration
# ------------------

# The location of the webserver docroot. Used for testing on CI infrastructure.
## GOOD
server.docroot = /var/www


# Debugging configuration
# ---------------------------------------
## GOOD

# Verbosity of drush commands. Set to TRUE to be verbose.
drush.verbose = FALSE

# Activate or de-activate terminal color.
drush.color = 1

# Verbosity of PHP Codesniffer. Set to 0 for standard output, 1 for progress
# report, 2 for debugging info.
phpcs.verbose = 0


# AWS SDK
# -------
## REMOVE ALL AMWS

aws.region = eu-west-1


# AWS Cloud Formation
# -------------------
cf.template = single-server


# AWS CodeDeploy
# --------------
deploy.serviceRole = arn:aws:iam::918396081007:role/CodeDeploy


# Build defaults
# --------------

# Whether or not to stop executing the build if a directory cannot be copied.
copy.path.haltonerror = true


# Shared paths
# ------------
## GOOD

# Global share location.
share.global.path = /tmp

# Main share locations.
share.platform.path = ${share.global.path}/platform
share.subsites.path = ${share.global.path}/subsites
share.composer.path = ${share.global.path}/composer

# The path to save deploy packages to:
subsite.release.path = ${share.subsites.path}/${subsite.id}


# Docker
# ------

# Default project id.
## UPDATE TO BRANCHES?
docker.project.id = environment


# Composer hook phingcall target lists. Space separated only.
# -----------------------------------------------------------
## GOOD
composer.hook.post.install = starterkit-link-binary starterkit-copy-templates
composer.hook.post.update =
composer.hook.pre.install =
composer.hook.pre.update =
